ggplotly(gg) |>
config(
modeBarButtonsToRemove = list("select2d", "lasso2d","hoverClosestCartesian", "hoverCompareCartesian","toggleSpikelines"),
scrollZoom = TRUE,
displaylogo = FALSE,
doubleClick = "reset",
locale = "es"
) |>
add_text(text = "Hola")
gg = ggplot(datos, aes(x = nombre, y = odds_ratio, fill = factor(años_datos))) +
geom_bar(stat = "identity", position = position_dodge()) +
scale_fill_manual(values = c("#691c32","#b38e5d")) +
labs(x = gsub("_", " ", "Hola") |> stringr::str_squish() |> tools::toTitleCase(),
y = "Valor",
fill = "Año") +
theme_minimal(base_size = 12) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, colour = "black", face = "bold"),
axis.title.x = element_text(color = "black", face = "bold")) +
geom_hline(yintercept = 1, linetype = "dashed", color = "red")
ggplotly(gg) |>
config(
modeBarButtonsToRemove = list("select2d", "lasso2d","hoverClosestCartesian", "hoverCompareCartesian","toggleSpikelines"),
scrollZoom = TRUE,
displaylogo = FALSE,
doubleClick = "reset",
locale = "es"
) |>
add_text(
x = datos$nombre,
y = datos$odds_ratio / 2,
text = round(datos$odds_ratio, 2),
textangle = 90,
textfont = list(color = "white", size = 12),
showlegend = FALSE
)
### Odds Ratio
output$grafica_logodds = renderPlotly({
gg = ggplot(datos(), aes(x = nombre, y = odds_ratio, fill = factor(años_datos))) +
geom_bar(stat = "identity", position = position_dodge()) +
scale_fill_manual(values = c("#691c32","#b38e5d")) +
geom_text(aes(label = round(odds_ratio, 2), y = odds_ratio / 2),
position = position_dodge(width = 0.9),
size = 1,
color = "white") +
labs(x = gsub("_", " ", input$variable) |> stringr::str_squish() |> tools::toTitleCase(),
y = "Valor",
fill = "Año") +
theme_minimal(base_size = 12) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, colour = "black", face = "bold"),
axis.title.x = element_text(color = "black", face = "bold")) +
geom_hline(yintercept = 1, linetype = "dashed", color = "red")
ggplotly(gg) |>
config(
modeBarButtonsToRemove = list("select2d", "lasso2d","hoverClosestCartesian", "hoverCompareCartesian","toggleSpikelines"),
scrollZoom = TRUE,
displaylogo = FALSE,
doubleClick = "reset",
locale = "es"
)
})
gg = ggplot(datos, aes(x = nombre, y = odds_ratio, fill = factor(años_datos))) +
geom_bar(stat = "identity", position = position_dodge()) +
scale_fill_manual(values = c("#691c32","#b38e5d")) +
geom_text(aes(label = round(odds_ratio, 2), y = odds_ratio / 2),
position = position_dodge(width = 0.9),
size = 1,
color = "white") +
labs(x = gsub("_", " ", "Hola Hola") |> stringr::str_squish() |> tools::toTitleCase(),
y = "Valor",
fill = "Año") +
theme_minimal(base_size = 12) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, colour = "black", face = "bold"),
axis.title.x = element_text(color = "black", face = "bold")) +
geom_hline(yintercept = 1, linetype = "dashed", color = "red")
ggplotly(gg) |>
config(
modeBarButtonsToRemove = list("select2d", "lasso2d","hoverClosestCartesian", "hoverCompareCartesian","toggleSpikelines"),
scrollZoom = TRUE,
displaylogo = FALSE,
doubleClick = "reset",
locale = "es"
)
gg = ggplot(datos, aes(x = nombre, y = odds_ratio, fill = factor(años_datos))) +
geom_bar(stat = "identity", position = position_dodge()) +
scale_fill_manual(values = c("#691c32","#b38e5d")) +
geom_text(aes(label = round(odds_ratio, 2), y = odds_ratio / 2),
position = position_dodge(width = 0.9),
size = 4,
color = "white") +
labs(x = gsub("_", " ", "Hola Hola") |> stringr::str_squish() |> tools::toTitleCase(),
y = "Valor",
fill = "Año") +
theme_minimal(base_size = 12) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, colour = "black", face = "bold"),
axis.title.x = element_text(color = "black", face = "bold")) +
geom_hline(yintercept = 1, linetype = "dashed", color = "red")
ggplotly(gg) |>
config(
modeBarButtonsToRemove = list("select2d", "lasso2d","hoverClosestCartesian", "hoverCompareCartesian","toggleSpikelines"),
scrollZoom = TRUE,
displaylogo = FALSE,
doubleClick = "reset",
locale = "es"
)
gg = ggplot(datos, aes(x = nombre, y = odds_ratio, fill = factor(años_datos))) +
geom_bar(stat = "identity", position = position_dodge()) +
scale_fill_manual(values = c("#691c32","#b38e5d")) +
geom_text(aes(label = round(odds_ratio, 2), y = odds_ratio / 2),
position = position_dodge(width = 0.9),
size = 3,
color = "white") +
labs(x = gsub("_", " ", "Hola Hola") |> stringr::str_squish() |> tools::toTitleCase(),
y = "Valor",
fill = "Año") +
theme_minimal(base_size = 12) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, colour = "black", face = "bold"),
axis.title.x = element_text(color = "black", face = "bold")) +
geom_hline(yintercept = 1, linetype = "dashed", color = "red")
ggplotly(gg) |>
config(
modeBarButtonsToRemove = list("select2d", "lasso2d","hoverClosestCartesian", "hoverCompareCartesian","toggleSpikelines"),
scrollZoom = TRUE,
displaylogo = FALSE,
doubleClick = "reset",
locale = "es"
)
runApp()
gg = ggplot(datos, aes(x = nombre, y = odds_ratio, fill = factor(años_datos))) +
geom_bar(stat = "identity", position = position_dodge()) +
scale_fill_manual(values = c("#691c32","#b38e5d")) +
dplyr::if_else(condition = nrow(datos) < 12,
true = geom_text(aes(label = round(odds_ratio, 2), y = odds_ratio / 2),
position = position_dodge(width = 0.9),
size = 4,
color = "white"),
false = geom_text(aes(label = round(odds_ratio, 2), y = odds_ratio / 2),
position = position_dodge(width = 0.9),
size = 2,
color = "white")) +
labs(x = gsub("_", " ", "Hola Hola") |> stringr::str_squish() |> tools::toTitleCase(),
y = "Valor",
fill = "Año") +
theme_minimal(base_size = 12) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, colour = "black", face = "bold"),
axis.title.x = element_text(color = "black", face = "bold")) +
geom_hline(yintercept = 1, linetype = "dashed", color = "red")
gg = ggplot(datos, aes(x = nombre, y = odds_ratio, fill = factor(años_datos))) +
geom_bar(stat = "identity", position = position_dodge()) +
scale_fill_manual(values = c("#691c32","#b38e5d")) +
{
if (nrow(datos) < 12) {
geom_text(
aes(label = round(odds_ratio, 2), y = odds_ratio / 2),
position = position_dodge(width = 0.9),
size = 4,
color = "white"
)
} else {
geom_text(
aes(label = round(odds_ratio, 2), y = odds_ratio / 2),
position = position_dodge(width = 0.9),
size = 2,
color = "white"
)
}
} +
labs(x = gsub("_", " ", "Hola Hola") |> stringr::str_squish() |> tools::toTitleCase(),
y = "Valor",
fill = "Año") +
theme_minimal(base_size = 12) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, colour = "black", face = "bold"),
axis.title.x = element_text(color = "black", face = "bold")) +
geom_hline(yintercept = 1, linetype = "dashed", color = "red")
ggplotly(gg) |>
config(
modeBarButtonsToRemove = list("select2d", "lasso2d","hoverClosestCartesian", "hoverCompareCartesian","toggleSpikelines"),
scrollZoom = TRUE,
displaylogo = FALSE,
doubleClick = "reset",
locale = "es"
)
runApp()
runApp()
runApp()
#Pseudo- R cuadrada
library(DescTools)
PseudoR2_2025=PseudoR2(mylogit2025, which = c("CoxSnell","Nagelkerke","McFadden"))
PseudoR2_2025
runApp()
#Pseudo- R cuadrada
#library(DescTools)
PseudoR2_2024=PseudoR2(mylogit2024, which = c("CoxSnell","Nagelkerke","McFadden"))
PseudoR2_2024
runApp()
runApp()
PseudoR2_2025_multi=PseudoR2(multi_mylogit2025, which = c("CoxSnell","Nagelkerke","McFadden"))
PseudoR2_2025_multi
PseudoR2_2024_multi=PseudoR2(multi_mylogit2024, which = c("CoxSnell","Nagelkerke","McFadden"))
PseudoR2_2025_multi
PseudoR2_2024_multi
runApp()
multi_mylogit2024
multi_mylogit2025
multi_mylogit2025$deviance
com_2025
barplot(sav_2025$ocupacion |> table())
barplot(multinomial.data2025$ocupacion |> table())
Pro_binary.data2025 |> dplyr::filter(ocupacion!='No respuesta') |> nrow()
source("C:/Users/SIGEH/Desktop/Lalo/Gob/Proyectos/GWR/Multinomial carga.R", echo = TRUE)
ummary(multi_mylogit2025)$coefficients
summary(multi_mylogit2025)$coefficients
runApp()
shiny::runApp()
runApp()
runApp()
#####Variables independientes:
multinomial.data2025 = Pro_binary.data2025
multinomial.data2025=multinomial.data2025 |>
dplyr::filter(ocupacion!='No respuesta')
multinomial.data2025$ocupacion |> table()
#####Variables independientes:
multinomial.data2025 = Pro_binary.data2025
multinomial.data2025=multinomial.data2025 |>
dplyr::filter(ocupacion!='No respuesta')
multinomial.data2025$P19[multinomial.data2025$P19=='No sé']='Ni aprueba ni desaprueba'
multinomial.data2025$P19=factor(multinomial.data2025$P19,levels =levels(multinomial.data2025$P19)[c(3,2,4)] )
multinomial.data2025$ocupacion |> table()
multi_mylogit2025= multinom(
reformulate(names(multinomial.data2025)[c(2:37)],"P19"),
weights = multinomial.data2025$PESOF, ##Pesos normalizados
data = multinomial.data2025,
model = TRUE)
com_2025 = summary(multi_mylogit2025)$coefficients |>  as.data.frame()
com_2025
multinomial.data2025$ocupacion |> table()
multinomial.data2025 |> dplyr::group_by(ocupacion,P19) |> dplyr::summarise(z=sum(PESOF,na.rm = T))
multinomial.data2025 |> dplyr::group_by(ocupacion,P19) |> dplyr::summarise(z=sum(PESOF,na.rm = T))->zzz
View(zzz)
#####Variables independientes:
multinomial.data2025 = Pro_binary.data2025
multinomial.data2025=multinomial.data2025 |>
dplyr::filter(ocupacion!='No respuesta') |>
dplyr::mutate(dplyr::across(tidyselect::where(is.factor), forcats::fct_drop),
ocupacion = relevel(x = ocupacion, ref = "Hogar"))
multinomial.data2025$ocupacion |> table()
multinomial.data2025$P19[multinomial.data2025$P19=='No sé']='Ni aprueba ni desaprueba'
multinomial.data2025$P19=factor(multinomial.data2025$P19,levels =levels(multinomial.data2025$P19)[c(3,2,4)] )
multinomial.data2025$ocupacion |> table()
levels(multinomial.data2025$P19)
library(nnet)
multi_mylogit2025= multinom(
reformulate(names(multinomial.data2025)[c(2:37)],"P19"),
weights = multinomial.data2025$PESOF, ##Pesos normalizados
data = multinomial.data2025,
model = TRUE)
com_2025 = summary(multi_mylogit2025)$coefficients |>  as.data.frame()
PseudoR2_2025_multi=PseudoR2(multi_mylogit2025, which = c("CoxSnell","Nagelkerke","McFadden"))
source("C:/Users/SIGEH/Desktop/Lalo/Gob/Proyectos/GWR/Multinomial carga.R", echo = TRUE)
runApp()
Pro_binary.data2024$ocupacion |> table()
com_2024
multinomial.data2024 = Pro_binary.data2024 |> dplyr::filter(ocupacion!='No respuesta') |>
dplyr::mutate(dplyr::across(tidyselect::where(is.factor), forcats::fct_drop),
ocupacion = relevel(x = ocupacion, ref = "Hogar"))
multinomial.data2024$P19[multinomial.data2024$P19=='No sé']='Ni aprueba ni desaprueba'
multinomial.data2024$P19=factor(multinomial.data2024$P19,levels =levels(multinomial.data2024$P19)[c(3,2,4)] )
multi_mylogit2024= multinom(
reformulate(names(multinomial.data2024)[c(2:37)],"P19"),
weights = multinomial.data2024$PESOF, ##Pesos normalizados
data = multinomial.data2024,
model = TRUE)
com_2024 = summary(multi_mylogit2024)$coefficients |>  as.data.frame()
com_2024
runApp()
lapply(Pro_binary.data2025, table)
lapply(Pro_binary.data2025, table |>  order)
runApp()
PseudoR2_2025=PseudoR2(mylogit2025, which = c("CoxSnell","Nagelkerke","McFadden"))
PseudoR2_2025
source("leer_encuestas.R")
source("preprocesamiento_datos.R")
# Modelo binomial logístico
# Variable respuesta: Aprobación del gobernador (Sí/No)
# 4836 respuestas
# Variables independientes:
#chisq.test(binary.data$inseguridad_comparada_año_anterior, binary.data$seguridad_publica)
#install.packages("ggcorrplot")
# library(ggcorrplot)
# model.matrix(~0+., data=binary.data |> dplyr::select(P19,`Zona Metropolitana`,Sexo,ESC)) %>%
#   cor(use="pairwise.complete.obs") %>%
#   ggcorrplot(show.diag=FALSE, type="lower", lab=TRUE, lab_size=2)
########################2025
binary.data2025 = sav_2025 |>
dplyr::select(-SbjNum,-MPO_INEGI,-Latitude,-Longitude) |>
dplyr::mutate(zona_metropolitana=factor(zona_metropolitana) ) |>
dplyr::relocate(PESOF,.after = dplyr::last_col()) |> dplyr::mutate(PESOF=round(PESOF/24,0))
binary.data2025$gobierno_ayuda_contra_deterioro_calles_avenidas[binary.data2025$gobierno_ayuda_contra_deterioro_calles_avenidas |> is.na()]='No sé'
binary.data2025$donde_hay_mas_corrupcion[binary.data2025$donde_hay_mas_corrupcion |> is.na()]='NO SÉ'
binary.data2025=binary.data2025 |>
dplyr::filter(escolaridad!='No respuesta') |>
dplyr::mutate(escolaridad=factor(as.character(escolaridad))) |>
dplyr::filter(servicio_que_afecta_economia!='Gastos médicos')|>
dplyr::mutate(servicio_que_afecta_economia=factor(as.character(servicio_que_afecta_economia)))
binary.data2025$servicio_que_afecta_economia = relevel(x = binary.data2025$servicio_que_afecta_economia, ref = "No sé")
########################2024
binary.data2024 =sav_2024 |>
dplyr::select(-Latitude,-Longitude) |>
dplyr::mutate(zona_metropolitana=factor(zona_metropolitana) ) |>
dplyr::relocate(PESOF,.after = dplyr::last_col()) |> dplyr::mutate(PESOF=round(PESOF/24,0))
binary.data2024$gobierno_ayuda_contra_deterioro_calles_avenidas[binary.data2024$gobierno_ayuda_contra_deterioro_calles_avenidas |> is.na()]='No sé'
binary.data2024$donde_hay_mas_corrupcion[binary.data2024$donde_hay_mas_corrupcion |> is.na()]='No sé'
lapply(binary.data2024[,2:37], levels)
lapply(binary.data2025[,2:37], levels)
source("homologar_respuestas_entre_años.R")
###### Inicia Enrique
source("Procesar_2024.R")
source("Procesar_2025.R")
#### Termina Enrique
binary.data2024 = Pro_binary.data2024 |>
dplyr::filter(P19%in%c("Aprueba","Desaprueba")) |>
dplyr::mutate(P19=factor(ifelse(P19=='Aprueba',1,0),levels=0:1))
source("leer_encuestas.R")
source("preprocesamiento_datos.R")
# Modelo binomial logístico
# Variable respuesta: Aprobación del gobernador (Sí/No)
# 4836 respuestas
# Variables independientes:
#chisq.test(binary.data$inseguridad_comparada_año_anterior, binary.data$seguridad_publica)
#install.packages("ggcorrplot")
# library(ggcorrplot)
# model.matrix(~0+., data=binary.data |> dplyr::select(P19,`Zona Metropolitana`,Sexo,ESC)) %>%
#   cor(use="pairwise.complete.obs") %>%
#   ggcorrplot(show.diag=FALSE, type="lower", lab=TRUE, lab_size=2)
########################2025
binary.data2025 = sav_2025 |>
dplyr::select(-SbjNum,-MPO_INEGI,-Latitude,-Longitude) |>
dplyr::mutate(zona_metropolitana=factor(zona_metropolitana) ) |>
dplyr::relocate(PESOF,.after = dplyr::last_col()) |> dplyr::mutate(PESOF=round(PESOF/24,0))
binary.data2025$gobierno_ayuda_contra_deterioro_calles_avenidas[binary.data2025$gobierno_ayuda_contra_deterioro_calles_avenidas |> is.na()]='No sé'
binary.data2025$donde_hay_mas_corrupcion[binary.data2025$donde_hay_mas_corrupcion |> is.na()]='NO SÉ'
binary.data2025=binary.data2025 |>
dplyr::filter(escolaridad!='No respuesta') |>
dplyr::mutate(escolaridad=factor(as.character(escolaridad))) |>
dplyr::filter(servicio_que_afecta_economia!='Gastos médicos')|>
dplyr::mutate(servicio_que_afecta_economia=factor(as.character(servicio_que_afecta_economia)))
binary.data2025$servicio_que_afecta_economia = relevel(x = binary.data2025$servicio_que_afecta_economia, ref = "No sé")
########################2024
binary.data2024 =sav_2024 |>
dplyr::select(-Latitude,-Longitude) |>
dplyr::mutate(zona_metropolitana=factor(zona_metropolitana) ) |>
dplyr::relocate(PESOF,.after = dplyr::last_col()) |> dplyr::mutate(PESOF=round(PESOF/24,0))
binary.data2024$gobierno_ayuda_contra_deterioro_calles_avenidas[binary.data2024$gobierno_ayuda_contra_deterioro_calles_avenidas |> is.na()]='No sé'
binary.data2024$donde_hay_mas_corrupcion[binary.data2024$donde_hay_mas_corrupcion |> is.na()]='No sé'
lapply(binary.data2024[,2:37], levels)
lapply(binary.data2025[,2:37], levels)
source("homologar_respuestas_entre_años.R")
###### Inicia Enrique
source("Procesar_2024.R")
source("Procesar_2025.R")
#### Termina Enrique
binary.data2024 = Pro_binary.data2024 |>
dplyr::filter(P19%in%c("Aprueba","Desaprueba")) |>
dplyr::mutate(P19=factor(ifelse(P19=='Aprueba',1,0),levels=0:1))
Pro_binary.data2024
View(Pro_binary.data2024)
binary.data2024 = Pro_binary.data2024 |>
dplyr::rename(P19 = P20) |>
dplyr::filter(P19%in%c("Aprueba","Desaprueba")) |>
dplyr::mutate(P19=factor(ifelse(P19=='Aprueba',1,0),levels=0:1))
View(binary.data2024)
View(binary.data2024)
View(binary.data2025)
View(binary.data2024)
View(binary.data2025)
View(binary.data2024)
View(binary.data2025)
View(binary.data2024)
source("C:/Users/SIGEH/Desktop/Lalo/Gob/Proyectos/GWR/binary_logistic_regression.R", echo = TRUE)
source("C:/Users/SIGEH/Desktop/Lalo/Gob/Proyectos/GWR/Multinomial carga.R", echo = TRUE)
source("C:/Users/SIGEH/Desktop/Lalo/Gob/Proyectos/GWR/Multinomial carga.R", echo = TRUE)
View(Pro_binary.data2024)
View(Pro_binary.data2025)
View(Pro_binary.data2024)
############
### 2024 ###
############
multinomial.data2024 = Pro_binary.data2024 |>
dplyr::rename(P19 = P20)
View(multinomial.data2025)
############
### 2024 ###
############
multinomial.data2024 = Pro_binary.data2024 |>
dplyr::rename(P19 = P20)
View(multinomial.data2024)
multinomial.data2024$P19 |>  unique()
# |> dplyr::filter(ocupacion!='No respuesta') |>
# dplyr::mutate(dplyr::across(tidyselect::where(is.factor), forcats::fct_drop),
#               ocupacion = relevel(x = ocupacion, ref = "Hogar"))
multinomial.data2024$P19[multinomial.data2024$P19=='No sé']='Ni aprueba ni desaprueba'
multinomial.data2024$P19=factor(multinomial.data2024$P19,levels =levels(multinomial.data2024$P19)[c(3,2,4)] )
multinomial.data2024$P19 |>  unique()
############
### 2024 ###
############
multinomial.data2024 = Pro_binary.data2024 |>
dplyr::rename(P19 = P20)
View(multinomial.data2024)
############
### 2024 ###
############
multinomial.data2024 = Pro_binary.data2024 |>
dplyr::rename(P19 = P20) |>
dplyr::mutate(P19 = stringr::str_squish(P19))
# |> dplyr::filter(ocupacion!='No respuesta') |>
# dplyr::mutate(dplyr::across(tidyselect::where(is.factor), forcats::fct_drop),
#               ocupacion = relevel(x = ocupacion, ref = "Hogar"))
multinomial.data2024$P19[multinomial.data2024$P19=='No sé']='Ni aprueba ni desaprueba'
multinomial.data2024$P19=factor(multinomial.data2024$P19,levels =levels(multinomial.data2024$P19)[c(3,2,4)] )
multinomial.data2024$P19 |>  unique()
############
### 2024 ###
############
multinomial.data2024 = Pro_binary.data2024 |>
dplyr::rename(P19 = P20) |>
dplyr::mutate(P19 = stringr::str_squish(P19))
multinomial.data2024$P19 |>  unique()
# |> dplyr::filter(ocupacion!='No respuesta') |>
# dplyr::mutate(dplyr::across(tidyselect::where(is.factor), forcats::fct_drop),
#               ocupacion = relevel(x = ocupacion, ref = "Hogar"))
multinomial.data2024$P19[multinomial.data2024$P19=='No sé']='Ni aprueba ni desaprueba'
multinomial.data2024$P19 |>  unique()
multinomial.data2024$P19=factor(multinomial.data2024$P19,levels =levels(multinomial.data2024$P19)[c(3,2,4)] )
multinomial.data2024$P19 |>  unique()
multinomial.data2024 = Pro_binary.data2024 |>
dplyr::rename(P19 = P20) |>
dplyr::mutate(P19 = stringr::str_squish(P19))
# |> dplyr::filter(ocupacion!='No respuesta') |>
# dplyr::mutate(dplyr::across(tidyselect::where(is.factor), forcats::fct_drop),
#               ocupacion = relevel(x = ocupacion, ref = "Hogar"))
multinomial.data2024$P19[multinomial.data2024$P19=='No sé']='Ni aprueba ni desaprueba'
multinomial.data2024 = Pro_binary.data2024 |>
dplyr::rename(P19 = P20) |>
dplyr::mutate(P19 = stringr::str_squish(P19))
# |> dplyr::filter(ocupacion!='No respuesta') |>
# dplyr::mutate(dplyr::across(tidyselect::where(is.factor), forcats::fct_drop),
#               ocupacion = relevel(x = ocupacion, ref = "Hogar"))
multinomial.data2024$P19[multinomial.data2024$P19=='No sé']='Ni aprueba ni desaprueba'
multinomial.data2024$P19 |>  unique()
levels(multinomial.data2024$P19)
#####Variables independientes:
multinomial.data2025 = Pro_binary.data2025
# multinomial.data2025=multinomial.data2025 |>
#   dplyr::filter(ocupacion!='No respuesta') |>
#   dplyr::mutate(dplyr::across(tidyselect::where(is.factor), forcats::fct_drop),
#                 ocupacion = relevel(x = ocupacion, ref = "Hogar"))
multinomial.data2025$P19[multinomial.data2025$P19=='No sé']='Ni aprueba ni desaprueba'
multinomial.data2025$P19 |>  unique()
#####Variables independientes:
multinomial.data2025 = Pro_binary.data2025
# multinomial.data2025=multinomial.data2025 |>
#   dplyr::filter(ocupacion!='No respuesta') |>
#   dplyr::mutate(dplyr::across(tidyselect::where(is.factor), forcats::fct_drop),
#                 ocupacion = relevel(x = ocupacion, ref = "Hogar"))
multinomial.data2025$P19[multinomial.data2025$P19=='No sé']='Ni aprueba ni desaprueba'
multinomial.data2025$P19=factor(multinomial.data2025$P19,levels =levels(multinomial.data2025$P19)[c(3,2,4)] )
multinomial.data2025$P19 |>  unique()
#####Variables independientes:
multinomial.data2025 = Pro_binary.data2025
# multinomial.data2025=multinomial.data2025 |>
#   dplyr::filter(ocupacion!='No respuesta') |>
#   dplyr::mutate(dplyr::across(tidyselect::where(is.factor), forcats::fct_drop),
#                 ocupacion = relevel(x = ocupacion, ref = "Hogar"))
multinomial.data2025$P19[multinomial.data2025$P19=='No sé']='Ni aprueba ni desaprueba'
multinomial.data2025$P19 |>  unique()
multinomial.data2025$P19=factor(multinomial.data2025$P19,levels =levels(multinomial.data2025$P19)[c(3,2,4)] )
multinomial.data2025$P19 |>  unique()
#####Variables independientes:
multinomial.data2025 = Pro_binary.data2025
# multinomial.data2025=multinomial.data2025 |>
#   dplyr::filter(ocupacion!='No respuesta') |>
#   dplyr::mutate(dplyr::across(tidyselect::where(is.factor), forcats::fct_drop),
#                 ocupacion = relevel(x = ocupacion, ref = "Hogar"))
multinomial.data2025$P19[multinomial.data2025$P19=='No sé']='Ni aprueba ni desaprueba'
multinomial.data2025$P19 |>  unique()
multinomial.data2025 = multinomial.data2025 |>
dplyr::mutate(dplyr::across(tidyselect::where(is.factor), forcats::fct_drop),
P19 = factor(x = P19, levels = c("Ni aprueba ni desaprueba", "Aprueba", "Desaprueba")))
multinomial.data2025$P19 |>  unique()
############
### 2024 ###
############
multinomial.data2024 = Pro_binary.data2024 |>
dplyr::rename(P19 = P20) |>
dplyr::mutate(P19 = stringr::str_squish(P19))
# |> dplyr::filter(ocupacion!='No respuesta') |>
# dplyr::mutate(dplyr::across(tidyselect::where(is.factor), forcats::fct_drop),
#               ocupacion = relevel(x = ocupacion, ref = "Hogar"))
multinomial.data2024$P19[multinomial.data2024$P19=='No sé']='Ni aprueba ni desaprueba'
multinomial.data2024 = multinomial.data2024 |>
dplyr::mutate(dplyr::across(tidyselect::where(is.factor), forcats::fct_drop),
P19 = factor(x = P19, levels = c("Ni aprueba ni desaprueba", "Aprueba", "Desaprueba")))
multinomial.data2024$P19 |>  unique()
source("C:/Users/SIGEH/Desktop/Lalo/Gob/Proyectos/GWR/Multinomial carga.R", echo = TRUE)
runApp()
View(com_2024)
View(com_2025)
View(com_2024)
View(coef_2024)
View(coef_2025)
View(coef_2024)
exp(1)
